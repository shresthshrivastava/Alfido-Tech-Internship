import java.sql.*;
import java.util.*;

public class ECommerceApp {

    // Database Connection Details
    private static final String URL = "jdbc:mysql://localhost:3306/ecommerce";
    private static final String USER = "root";
    private static final String PASSWORD = "root";

    // User Class
    public static class User {
        private int id;
        private String username;
        private String password;
        private String email;

        public User(String username, String password, String email) {
            this.username = username;
            this.password = password;
            this.email = email;
        }

        // Getters
        public int getId() { return id; }
        public String getUsername() { return username; }
        public String getPassword() { return password; }
        public String getEmail() { return email; }

        // Setters
        public void setId(int id) { this.id = id; }
    }

    // Product Class
    public static class Product {
        private int id;
        private String name;
        private String description;
        private double price;
        private int stock;

        public Product(int id, String name, String description, double price, int stock) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.price = price;
            this.stock = stock;
        }

        // Getters
        public int getId() { return id; }
        public String getName() { return name; }
        public String getDescription() { return description; }
        public double getPrice() { return price; }
        public int getStock() { return stock; }
    }

    // Cart Class (Simple cart implementation)
    public static class Cart {
        private Map<Product, Integer> items;

        public Cart() {
            items = new HashMap<>();
        }

        public void addProduct(Product product, int quantity) {
            items.put(product, items.getOrDefault(product, 0) + quantity);
        }

        public void removeProduct(Product product) {
            items.remove(product);
        }

        public double getTotal() {
            double total = 0;
            for (Map.Entry<Product, Integer> entry : items.entrySet()) {
                total += entry.getKey().getPrice() * entry.getValue();
            }
            return total;
        }

        public void clear() {
            items.clear();
        }

        public void showCart() {
            System.out.println("Cart:");
            for (Map.Entry<Product, Integer> entry : items.entrySet()) {
                System.out.println(entry.getKey().getName() + " - Quantity: " + entry.getValue() + " - Price: " + entry.getKey().getPrice());
            }
            System.out.println("Total: " + getTotal());
        }
    }

    // Database Utility for Connection
    public static class DatabaseUtil {
        public static Connection getConnection() throws SQLException {
            return DriverManager.getConnection(URL, USER, PASSWORD);
        }
    }

    // Main Application Class
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        User loggedInUser = null;
        Cart cart = new Cart();

        while (true) {
            System.out.println("1. Register\n2. Login\n3. Browse Products\n4. Add to Cart\n5. View Cart\n6. Place Order\n7. Exit");
            System.out.print("Select an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            if (choice == 1) {
                // Register User
                System.out.print("Enter Username: ");
                String username = scanner.nextLine();
                System.out.print("Enter Password: ");
                String password = scanner.nextLine();
                System.out.print("Enter Email: ");
                String email = scanner.nextLine();

                User user = new User(username, password, email);
                registerUser(user);
                System.out.println("User registered successfully!");
            } else if (choice == 2) {
                // Login User
                System.out.print("Enter Username: ");
                String username = scanner.nextLine();
                System.out.print("Enter Password: ");
                String password = scanner.nextLine();

                loggedInUser = loginUser(username, password);
                if (loggedInUser != null) {
                    System.out.println("Login successful!");
                } else {
                    System.out.println("Invalid username or password.");
                }
            } else if (choice == 3) {
                // Browse Products
                List<Product> products = getAllProducts();
                System.out.println("Available Products:");
                for (Product product : products) {
                    System.out.println(product.getId() + ". " + product.getName() + " - " + product.getPrice() + " USD");
                }
            } else if (choice == 4 && loggedInUser != null) {
                // Add to Cart
                System.out.print("Enter Product ID to add to cart: ");
                int productId = scanner.nextInt();
                System.out.print("Enter Quantity: ");
                int quantity = scanner.nextInt();

                Product product = getProductById(productId);
                if (product != null) {
                    cart.addProduct(product, quantity);
                    System.out.println("Product added to cart!");
                } else {
                    System.out.println("Product not found.");
                }
            } else if (choice == 5 && loggedInUser != null) {
                // View Cart
                cart.showCart();
            } else if (choice == 6 && loggedInUser != null) {
                // Place Order
                placeOrder(loggedInUser, cart);
                cart.clear();
                System.out.println("Order placed successfully!");
            } else if (choice == 7) {
                // Exit
                System.out.println("Thank you for using the E-Commerce app!");
                break;
            } else {
                System.out.println("Please log in to access this feature.");
            }
        }

        scanner.close();
    }

    // Register User in Database
    public static void registerUser(User user) {
        String sql = "INSERT INTO users (username, password, email) VALUES (?, ?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getUsername());
            stmt.setString(2, user.getPassword());
            stmt.setString(3, user.getEmail());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Login User from Database
    public static User loginUser(String username, String password) {
        String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, password);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                User user = new User(rs.getString("username"), rs.getString("password"), rs.getString("email"));
                user.setId(rs.getInt("id"));
                return user;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Get All Products from Database
    public static List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products";
        try (Connection conn = DatabaseUtil.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Product product = new Product(rs.getInt("id"), rs.getString("name"), rs.getString("description"),
                        rs.getDouble("price"), rs.getInt("stock"));
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    // Get Product by ID
    public static Product getProductById(int id) {
        String sql = "SELECT * FROM products WHERE id = ?";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Product(rs.getInt("id"), rs.getString("name"), rs.getString("description"),
                        rs.getDouble("price"), rs.getInt("stock"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Place an Order
    public static void placeOrder(User user, Cart cart) {
        String orderSql = "INSERT INTO orders (user_id, total) VALUES (?, ?)";
        try (Connection conn = DatabaseUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement(orderSql, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setInt(1, user.getId());
            stmt.setDouble(2, cart.getTotal());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
                int orderId = rs.getInt(1);
                for (Map.Entry<Product, Integer> entry : cart.items.entrySet()) {
                    String itemSql = "INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)";
                    try (PreparedStatement itemStmt = conn.prepareStatement(itemSql)) {
                        itemStmt.setInt(1, orderId);
                        itemStmt.setInt(2, entry.getKey().getId());
                        itemStmt.setInt(3, entry.getValue());
                        itemStmt.setDouble(4, entry.getKey().getPrice());
                        itemStmt.executeUpdate();
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
